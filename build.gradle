plugins {
    id 'java'
    id("com.gradleup.shadow") version "9.0.0-beta15"
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.spatium'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly(files("libs/CoreProtect-22.4.jar"))

    implementation('org.postgresql:postgresql:42.7.7')
    implementation('redis.clients:jedis:5.1.0')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.17.0')
    implementation("net.kyori:adventure-api:4.21.0")
    implementation('com.google.code.gson:gson:2.13.1')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.17.0')
}

def targetJavaVersion = 21
def targetPaperVersion = "1.21.4"
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }

    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion(targetPaperVersion)

        downloadPlugins {
            return url("https://www.patreon.com/file?h=104200466&i=18902237")
        }

        jvmArgs("-Dcom.mojang.eula.agree=true")
    }

    shadowJar {
        archiveClassifier.set("")
        mergeServiceFiles()

        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/*.kotlin_module'
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
